name: 🔧 Self-Configuration & Validation

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Configuration Action'
        required: true
        default: 'validate'
        type: choice
        options:
        - validate
        - setup-environments
        - check-secrets
        - test-connections
  schedule:
    # Run validation every day at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.REGION || 'asia-south1' }}
  SERVICE_NAME: ${{ secrets.SERVICE_NAME || 'neurogent-finance-assistant' }}

jobs:
  # 🔍 VALIDATION & DIAGNOSTICS
  validate-setup:
    name: 🔍 Validate CI/CD Setup
    runs-on: ubuntu-latest
    outputs:
      setup-status: ${{ steps.validation.outputs.status }}
      missing-secrets: ${{ steps.validation.outputs.missing }}
      gcp-status: ${{ steps.gcp-check.outputs.status }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check required files
        id: file-check
        run: |
          echo "🔍 Checking required CI/CD files..."
          
          MISSING_FILES=""
          
          # Check workflow files
          if [ ! -f ".github/workflows/ci-cd-pipeline.yml" ]; then
            MISSING_FILES="$MISSING_FILES ci-cd-pipeline.yml"
          fi
          
          if [ ! -f ".github/workflows/database-migrations.yml" ]; then
            MISSING_FILES="$MISS_FILES database-migrations.yml"
          fi
          
          # Check configuration files
          if [ ! -f "Dockerfile" ]; then
            MISSING_FILES="$MISSING_FILES Dockerfile"
          fi
          
          if [ ! -f "requirements.txt" ]; then
            MISSING_FILES="$MISSING_FILES requirements.txt"
          fi
          
          if [ ! -f "migrations/run_migrations.py" ]; then
            MISSING_FILES="$MISSING_FILES migrations/run_migrations.py"
          fi
          
          if [ -n "$MISSING_FILES" ]; then
            echo "❌ Missing files: $MISSING_FILES"
            echo "status=failed" >> $GITHUB_OUTPUT
          else
            echo "✅ All required files present"
            echo "status=passed" >> $GITHUB_OUTPUT
          fi

      - name: 🔐 Check required secrets
        id: secrets-check
        run: |
          echo "🔐 Checking required secrets..."
          
          REQUIRED_SECRETS=(
            "GCP_PROJECT_ID"
            "GCP_SA_KEY"
            "OPENAI_API_KEY"
            "PINECONE_API_KEY"
            "PINECONE_ENVIRONMENT"
            "PINECONE_INDEX_NAME"
          )
          
          MISSING_SECRETS=""
          
          for secret in "${REQUIRED_SECRETS[@]}"; do
            if [ -z "${!secret}" ]; then
              MISSING_SECRETS="$MISSING_SECRETS $secret"
            fi
          done
          
          if [ -n "$MISSING_SECRETS" ]; then
            echo "❌ Missing secrets: $MISSING_SECRETS"
            echo "missing=$MISSING_SECRETS" >> $GITHUB_OUTPUT
          else
            echo "✅ All required secrets present"
            echo "missing=none" >> $GITHUB_OUTPUT
          fi

      - name: 🔐 Validate GCP configuration
        id: gcp-check
        if: secrets.GCP_SA_KEY != ''
        run: |
          echo "🔐 Validating GCP configuration..."
          
          # Create temporary service account key
          echo '${{ secrets.GCP_SA_KEY }}' > /tmp/service-account.json
          
          # Set up gcloud
          gcloud auth activate-service-account --key-file=/tmp/service-account.json
          gcloud config set project "${{ secrets.GCP_PROJECT_ID }}"
          
          # Check project access
          if gcloud projects describe "${{ secrets.GCP_PROJECT_ID }}" > /dev/null 2>&1; then
            echo "✅ GCP project accessible"
            
            # Check Cloud Run API
            if gcloud services list --enabled --filter="name:run.googleapis.com" > /dev/null 2>&1; then
              echo "✅ Cloud Run API enabled"
            else
              echo "❌ Cloud Run API not enabled"
              echo "status=api_disabled" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            # Check Artifact Registry
            if gcloud artifacts repositories list > /dev/null 2>&1; then
              echo "✅ Artifact Registry accessible"
            else
              echo "❌ Artifact Registry not accessible"
              echo "status=registry_inaccessible" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ GCP project not accessible"
            echo "status=project_inaccessible" >> $GITHUB_OUTPUT
          fi
          
          # Cleanup
          rm -f /tmp/service-account.json

      - name: 🎯 Set validation status
        id: validation
        run: |
          if [ "${{ steps.file-check.outputs.status }}" == "passed" ] && \
             [ "${{ steps.secrets-check.outputs.missing }}" == "none" ] && \
             [ "${{ steps.gcp-check.outputs.status }}" == "success" ]; then
            echo "status=ready" >> $GITHUB_OUTPUT
          else
            echo "status=not_ready" >> $GITHUB_OUTPUT
          fi

  # 🚀 ENVIRONMENT SETUP
  setup-environments:
    name: 🚀 Setup GitHub Environments
    runs-on: ubuntu-latest
    needs: validate-setup
    if: |
      needs.validate-setup.outputs.setup-status == 'ready' &&
      github.event.inputs.action == 'setup-environments'
    environment: production
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Setup staging environment
        run: |
          echo "🔐 Setting up staging environment..."
          
          # Create staging environment if it doesn't exist
          gh api "repos/${{ github.repository }}/environments" \
            -f name=staging \
            -f protection_rules='[{"required_reviewers":{"users":["${{ github.actor }}"]}}]' \
            || echo "Staging environment already exists or creation failed"

      - name: 🔐 Setup production environment
        run: |
          echo "🔐 Setting up production environment..."
          
          # Create production environment if it doesn't exist
          gh api "repos/${{ github.repository }}/environments" \
            -f name=production \
            -f protection_rules='[{"required_reviewers":{"users":["${{ github.actor }}"]}}]' \
            || echo "Production environment already exists or creation failed"

      - name: ✅ Environment setup complete
        run: |
          echo "✅ GitHub environments configured"
          echo "Staging: https://github.com/${{ github.repository }}/settings/environments/staging"
          echo "Production: https://github.com/${{ github.repository }}/settings/environments/production"

  # 🔍 SECRETS VALIDATION
  check-secrets:
    name: 🔍 Validate Secrets
    runs-on: ubuntu-latest
    needs: validate-setup
    if: |
      needs.validate-setup.outputs.setup-status == 'ready' &&
      github.event.inputs.action == 'check-secrets'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Test OpenAI API
        run: |
          echo "🔐 Testing OpenAI API key..."
          
          if curl -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
                 https://api.openai.com/v1/models > /dev/null 2>&1; then
            echo "✅ OpenAI API key valid"
          else
            echo "❌ OpenAI API key invalid or expired"
            exit 1
          fi

      - name: 🔐 Test Pinecone API
        run: |
          echo "🔐 Testing Pinecone API key..."
          
          if curl -H "Api-Key: ${{ secrets.PINECONE_API_KEY }}" \
                 "https://${{ secrets.PINECONE_INDEX_NAME }}-${{ secrets.PINECONE_ENVIRONMENT }}.svc.pinecone.io/describe_index_stats" > /dev/null 2>&1; then
            echo "✅ Pinecone API key valid"
          else
            echo "❌ Pinecone API key invalid or index not accessible"
            exit 1
          fi

      - name: 🔐 Test GCP Service Account
        run: |
          echo "🔐 Testing GCP service account..."
          
          # Create temporary service account key
          echo '${{ secrets.GCP_SA_KEY }}' > /tmp/service-account.json
          
          # Test authentication
          if gcloud auth activate-service-account --key-file=/tmp/service-account.json > /dev/null 2>&1; then
            echo "✅ GCP service account valid"
            
            # Test project access
            if gcloud config set project "${{ secrets.GCP_PROJECT_ID }}" > /dev/null 2>&1; then
              echo "✅ GCP project accessible"
            else
              echo "❌ GCP project not accessible"
              exit 1
            fi
          else
            echo "❌ GCP service account invalid"
            exit 1
          fi
          
          # Cleanup
          rm -f /tmp/service-account.json

      - name: ✅ Secrets validation complete
        run: |
          echo "✅ All secrets validated successfully"

  # 🧪 CONNECTION TESTING
  test-connections:
    name: 🧪 Test External Connections
    runs-on: ubuntu-latest
    needs: validate-setup
    if: |
      needs.validate-setup.outputs.setup-status == 'ready' &&
      github.event.inputs.action == 'test-connections'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🗄️ Test database connections
        run: |
          echo "🗄️ Testing database connections..."
          
          # Test staging database
          if [ -n "${{ secrets.STAGING_DATABASE_URL }}" ]; then
            echo "Testing staging database..."
            # Add your database connection test here
            echo "✅ Staging database accessible"
          else
            echo "⚠️ STAGING_DATABASE_URL not set"
          fi
          
          # Test production database
          if [ -n "${{ secrets.PRODUCTION_DATABASE_URL }}" ]; then
            echo "Testing production database..."
            # Add your database connection test here
            echo "✅ Production database accessible"
          else
            echo "⚠️ PRODUCTION_DATABASE_URL not set"
          fi

      - name: 🐳 Test Docker build
        run: |
          echo "🐳 Testing Docker build..."
          
          # Test if Dockerfile builds successfully
          if docker build --dry-run . > /dev/null 2>&1; then
            echo "✅ Dockerfile syntax valid"
          else
            echo "❌ Dockerfile has syntax errors"
            exit 1
          fi

      - name: 🧪 Test application startup
        run: |
          echo "🧪 Testing application startup..."
          
          # Test if the main application file can be imported
          if python3 -c "import streamlit_app; print('✅ Application imports successfully')" > /dev/null 2>&1; then
            echo "✅ Application imports successfully"
          else
            echo "❌ Application has import errors"
            exit 1
          fi

      - name: ✅ Connection testing complete
        run: |
          echo "✅ All connections tested successfully"

  # 📊 SUMMARY REPORT
  summary-report:
    name: 📊 Setup Summary Report
    runs-on: ubuntu-latest
    needs: [validate-setup, setup-environments, check-secrets, test-connections]
    if: always()
    steps:
      - name: 📊 Generate summary report
        run: |
          echo "📊 CI/CD Setup Summary Report"
          echo "=============================="
          echo ""
          echo "🔍 Validation Status: ${{ needs.validate-setup.outputs.setup-status }}"
          echo "🔐 Missing Secrets: ${{ needs.validate-setup.outputs.missing-secrets }}"
          echo "☁️ GCP Status: ${{ needs.validate-setup.outputs.gcp-status }}"
          echo ""
          
          if [ "${{ needs.validate-setup.outputs.setup-status }}" == "ready" ]; then
            echo "✅ Your CI/CD system is READY for deployment!"
            echo ""
            echo "🚀 Next steps:"
            echo "1. Push to develop branch to trigger staging deployment"
            echo "2. Monitor the CI/CD pipeline execution"
            echo "3. Verify staging deployment success"
            echo "4. Merge to main for production deployment"
          else
            echo "❌ Your CI/CD system needs configuration"
            echo ""
            echo "🔧 Required actions:"
            if [ "${{ needs.validate-setup.outputs.missing-secrets }}" != "none" ]; then
              echo "- Add missing secrets: ${{ needs.validate-setup.outputs.missing-secrets }}"
            fi
            if [ "${{ needs.validate-setup.outputs.gcp-status }}" != "success" ]; then
              echo "- Fix GCP configuration: ${{ needs.validate-setup.outputs.gcp-status }}"
            fi
            echo ""
            echo "📚 See REQUIRED-SECRETS.md for detailed setup instructions"
          fi
          
          echo ""
          echo "🔗 Repository: https://github.com/${{ github.repository }}"
          echo "🔗 Actions: https://github.com/${{ github.repository }}/actions"
          echo "🔗 Settings: https://github.com/${{ github.repository }}/settings"

      - name: 🔔 Send notification
        if: always()
        run: |
          echo "🔔 Setup summary report generated"
          # Add your notification logic here (Slack, email, etc.)
