name: 🚀 Universal CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment (bypass checks)'
        required: false
        default: false
        type: boolean

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  REGION: ${{ secrets.REGION || 'us-central1' }}
  SERVICE_NAME: ${{ secrets.SERVICE_NAME || 'app' }}

jobs:
  # 🔒 SECURITY & COMPLIANCE
  security-scan:
    name: 🔒 Security & Compliance Scan
    runs-on: ubuntu-latest
    outputs:
      security-status: ${{ steps.security-check.outputs.status }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔐 Secret scanning
        run: |
          echo "🔍 Scanning for secrets in code..."
          if grep -r "sk-" . --exclude-dir=.git --exclude-dir=node_modules; then
            echo "❌ Potential secrets found!"
            exit 1
          fi
          echo "✅ No secrets found in code"

      - name: 📋 Dependency vulnerability check
        run: |
          echo "🔍 Checking dependencies for vulnerabilities..."
          # This will be customized based on project type

      - name: 🎯 Set security status
        id: security-check
        run: |
          echo "status=passed" >> $GITHUB_OUTPUT

  # 🧪 TESTING & VALIDATION
  test-and-validate:
    name: 🧪 Test & Validation
    runs-on: ubuntu-latest
    needs: security-scan
    outputs:
      test-status: ${{ steps.test-results.outputs.status }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock

      - name: 🔍 Lint and format check
        run: |
          echo "🔍 Running linting checks..."
          pip install flake8 black isort
          black --check --diff .
          isort --check-only --diff .
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: 🧪 Run unit tests
        run: |
          echo "🧪 Running unit tests..."
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella


      - name: 🎯 Set test status
        id: test-results
        run: |
          echo "status=passed" >> $GITHUB_OUTPUT

  # 🐳 BUILD & CONTAINER
  build-container:
    name: 🐳 Build & Container
    runs-on: ubuntu-latest
    needs: [security-scan, test-and-validate]
    if: needs.security-scan.outputs.security-status == 'passed' && needs.test-and-validate.outputs.test-status == 'passed'
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock

      - name: 🔍 Lint and format check
        run: |
          echo "🔍 Running linting checks..."
          pip install flake8 black isort
          black --check --diff .
          isort --check-only --diff .
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: 🧪 Run unit tests
        run: |
          echo "🧪 Running unit tests..."
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella


      - name: 🎯 Set image tag
        run: echo "image-tag=${{ github.sha }}" >> $GITHUB_OUTPUT

  # 🗄️ DATABASE MIGRATION (if applicable)
  # This job will be conditionally added

  
  # 🗄️ DATABASE MIGRATION
  migrate-database:
    name: 🗄️ Database Migration
    runs-on: ubuntu-latest
    needs: [build-container, migrate-database]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: 🗄️ Run database migrations
        run: |
          echo "🗄️ Running database migrations..."
          if [ -f "migrations/run_migrations.py" ]; then
            python migrations/run_migrations.py               --environment="${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}"               --database-url="${{ github.ref == 'refs/heads/main' && secrets.PRODUCTION_DATABASE_URL || secrets.STAGING_DATABASE_URL }}"
          fi

  # 🚀 STAGING DEPLOYMENT
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-container, migrate-database]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: staging
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # This section will be customized based on deployment platform

  # 🚀 PRODUCTION DEPLOYMENT
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-container, deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # This section will be customized based on deployment platform

  # 📊 POST-DEPLOYMENT MONITORING
  post-deployment:
    name: 📊 Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    steps:
      - name: 📊 Deployment status
        run: |
          echo "📊 Deployment Summary:"
          echo "Security Scan: ${{ needs.security-scan.outputs.security-status }}"
          echo "Tests: ${{ needs.test-and-validate.outputs.test-status }}"
          echo "Build: ${{ needs.build-container.outputs.image-tag }}"
          echo "Staging: ${{ needs.deploy-staging.result }}"
          echo "Production: ${{ needs.deploy-production.result }}"
