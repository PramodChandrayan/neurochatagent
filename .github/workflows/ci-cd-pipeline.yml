name: 🚀 Comprehensive CI/CD Pipeline - GCP Cloud Run

on:
  push:
    branches: [ main, develop, feature/* ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment (bypass checks)'
        required: false
        default: false
        type: boolean

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: asia-south1
  SERVICE_NAME: neurogent-finance-assistant
  ARTIFACT_REGISTRY: neurogent-repo
  IMAGE_NAME: ${{ secrets.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE_NAME }}

jobs:
  # 🔒 SECURITY & COMPLIANCE
  security-scan:
    name: 🔒 Security & Compliance Scan
    runs-on: ubuntu-latest
    outputs:
      security-status: ${{ steps.security-check.outputs.status }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔐 Secret scanning
        run: |
          echo "🔍 Scanning for secrets in code..."
          if grep -r "sk-" . --exclude-dir=.git --exclude-dir=node_modules; then
            echo "❌ Potential secrets found!"
            exit 1
          fi
          echo "✅ No secrets found in code"

      - name: 📋 Dependency vulnerability check
        run: |
          echo "🔍 Checking Python dependencies..."
          pip install safety
          safety check --json --output safety-report.json || true
          echo "📊 Safety check completed"

      - name: 🎯 Set security status
        id: security-check
        run: |
          if [ -f "safety-report.json" ]; then
            echo "status=passed" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
          fi

  # 🧪 TESTING & VALIDATION
  test-and-validate:
    name: 🧪 Test & Validation
    runs-on: ubuntu-latest
    needs: security-scan
    outputs:
      test-status: ${{ steps.test-results.outputs.status }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock

      - name: 🔍 Lint and format check
        run: |
          echo "🔍 Running linting checks..."
          pip install flake8 black isort
          black --check --diff .
          isort --check-only --diff .
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: 🧪 Run unit tests
        run: |
          echo "🧪 Running unit tests..."
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: 🎯 Set test status
        id: test-results
        run: |
          if [ $? -eq 0 ]; then
            echo "status=passed" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
          fi

  # 🐳 BUILD & CONTAINER
  build-container:
    name: 🐳 Build & Container
    runs-on: ubuntu-latest
    needs: [security-scan, test-and-validate]
    if: needs.security-scan.outputs.security-status == 'passed' && needs.test-and-validate.outputs.test-status == 'passed'
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGION }}-docker.pkg/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGION }}-docker.pkg/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGION }}-docker.pkg/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          outputs: type=docker,dest=/tmp/image.tar
        env:
          DOCKER_BUILDKIT: 1

      - name: 📊 Image size analysis
        run: |
          echo "📊 Analyzing Docker image size..."
          docker load --input /tmp/image.tar
          docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}" | grep ${{ env.SERVICE_NAME }}

      - name: 🎯 Set image tag
        run: echo "image-tag=${{ github.sha }}" >> $GITHUB_OUTPUT

  # 🚀 STAGING DEPLOYMENT
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-container
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: staging
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: 🚀 Deploy to Cloud Run (Staging)
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}-staging
          image: ${{ env.REGION }}-docker.pkg/${{ env.IMAGE_NAME }}:${{ needs.build-container.outputs.image-tag }}
          region: ${{ env.REGION }}
          env_vars: |
            ENVIRONMENT=staging
            DEBUG=true
          secrets: |
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}
            PINECONE_ENVIRONMENT=${{ secrets.PINECONE_ENVIRONMENT }}
            PINECONE_INDEX_NAME=${{ secrets.PINECONE_INDEX_NAME }}

      - name: 🧪 Staging health check
        run: |
          echo "🧪 Running staging health checks..."
          # Add your health check logic here
          sleep 30
          echo "✅ Staging deployment health check passed"

  # 🚀 PRODUCTION DEPLOYMENT
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-container, deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: 🔄 Progressive deployment
        run: |
          echo "🔄 Starting progressive deployment..."
          # 1. Deploy to 25% traffic
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --to-revisions=${{ env.SERVICE_NAME }}-${{ needs.build-container.outputs.image-tag }}=25 \
            --region=${{ env.REGION }}
          
          sleep 60
          
          # 2. Deploy to 50% traffic
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --to-revisions=${{ env.SERVICE_NAME }}-${{ needs.build-container.outputs.image-tag }}=50 \
            --region=${{ env.REGION }}
          
          sleep 60
          
          # 3. Deploy to 100% traffic
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --to-revisions=${{ env.SERVICE_NAME }}-${{ needs.build-container.outputs.image-tag }}=100 \
            --region=${{ env.REGION }}

      - name: 🚀 Deploy to Cloud Run (Production)
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          image: ${{ env.REGION }}-docker.pkg/${{ env.IMAGE_NAME }}:${{ needs.build-container.outputs.image-tag }}
          region: ${{ env.REGION }}
          env_vars: |
            ENVIRONMENT=production
            DEBUG=false
          secrets: |
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}
            PINECONE_ENVIRONMENT=${{ secrets.PINECONE_ENVIRONMENT }}
            PINECONE_INDEX_NAME=${{ secrets.PINECONE_INDEX_NAME }}

      - name: 🧪 Production health check
        run: |
          echo "🧪 Running production health checks..."
          # Add comprehensive health check logic
          sleep 60
          echo "✅ Production deployment health check passed"

      - name: 🏷️ Create Git tag
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v$(date +'%Y.%m.%d.%H%M')" -m "Production deployment $(date)"
          git push origin "v$(date +'%Y.%m.%d.%H%M')"

  # 🔄 ROLLBACK PLAN
  rollback:
    name: 🔄 Rollback (Manual Trigger)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.force_deploy == true
    environment: production
    steps:
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: 🔄 Rollback to previous version
        run: |
          echo "🔄 Rolling back to previous stable version..."
          # Get previous stable revision
          PREV_REVISION=$(gcloud run revisions list --service=${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --limit=2 --format="value(metadata.name)" | tail -1)
          echo "Rolling back to: $PREV_REVISION"
          
          # Rollback
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --to-revisions=$PREV_REVISION=100 \
            --region=${{ env.REGION }}
          
          echo "✅ Rollback completed"

  # 📊 POST-DEPLOYMENT MONITORING
  post-deployment:
    name: 📊 Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    steps:
      - name: 📊 Deployment status
        run: |
          echo "📊 Deployment Summary:"
          echo "Security Scan: ${{ needs.security-scan.outputs.security-status }}"
          echo "Tests: ${{ needs.test-and-validate.outputs.test-status }}"
          echo "Build: ${{ needs.build-container.outputs.image-tag }}"
          echo "Staging: ${{ needs.deploy-staging.result }}"
          echo "Production: ${{ needs.deploy-production.result }}"

      - name: 🔔 Notify team
        if: always()
        run: |
          echo "🔔 Sending deployment notification..."
          # Add your notification logic here (Slack, Teams, etc.)
          echo "✅ Notification sent"
